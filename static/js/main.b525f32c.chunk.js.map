{"version":3,"sources":["components/NameTeam.js","constants/ActionTypes.js","components/TopCard.js","actions/index.js","components/User.js","components/Icon.js","components/UserGroup.js","components/Card.js","components/Header.js","views/Display.js","App.js","serviceWorker.js","reducers/DataMembers.js","reducers/sampleMembers.js","reducers/root.js","index.js"],"names":["Span","styled","span","NameTeam","name","CREATE_NEW_TEAM","DELETE_TEAM_BY_ID","CHANGE_NAME_BY_ID","SEARCH_ANYTHING","UPDATE_LIST","Input","input","connect","state","DataMembers","currentState","dispatch","props","deleteTeamById","id","type","types","action","changeNameById","value","handleEditTeamName","isEditing","useState","setValue","handleSaveName","event","useEffect","className","onChange","newName","target","style","color","onClick","title","fontStyle","fontWeight","User","this","elementNumber","admin","Component","Icon","src","alt","UserGroup","post","length","map","item","email","firstName","lastName","status","index","Card","SortableItem","SortableElement","mission","idTask","createNewTeam","task","searchAnything","search","setSearch","placeholder","updateList","newList","lists","setLists","edittingId","setEdittingId","newEdittingId","includes","filter","SortableList","SortableContainer","onSortEnd","oldIndex","newIndex","arrayMove","axis","transitionDuration","helperClass","distance","App","visibleTheme","Boolean","window","location","hostname","match","initialState","previousState","DetailList","newListAfterCreate","uuidv4","newListAfterDelete","newListAfterChanging","newListAfterSearching","memberIds","managerIds","RegExp","test","CourseList","myReducer","rootReducer","combineReducers","sampleMembers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iisBAUA,I,EAAMA,EAAOC,IAAOC,KAAV,8GAUKC,EAhBf,YAA0B,IAAPC,EAAM,EAANA,KACf,OACI,cAACJ,EAAD,UAAOI,KCYFC,G,MAAkB,mBAElBC,EAAoB,oBAEpBC,EAAoB,oBAEpBC,EAAkB,kBAElBC,EAAc,c,gBC+D3B,IAAMC,EAAQT,IAAOU,MAAV,+LA2BIC,eAjBS,SAAAC,GACtB,MAAO,CACLC,YAAaD,EAAMC,YAAYC,iBAIR,SAACC,EAAUC,GACpC,MAAO,CACHC,eAAgB,SAACC,GACfH,EChFsB,SAAAG,GAC5B,MAAO,CACLC,KAAMC,EACNF,MD6EaG,CAAsBH,KAEjCI,eAAgB,SAACJ,EAAIK,GACnBR,EC5EsB,SAACG,EAAIK,GACjC,MAAO,CACLJ,KAAMC,EACNF,KACAK,SDwEaF,CAAsBH,EAAIK,QAK5BZ,EA1Gf,SAAiBK,GACf,IACEQ,EAQER,EARFQ,mBACArB,EAOEa,EAPFb,KACAe,EAMEF,EANFE,GACAO,EAKET,EALFS,UACAR,EAIED,EAJFC,eACAK,EAGEN,EAHFM,eASF,EAA0BI,mBAASvB,GAAnC,mBAAOoB,EAAP,KAAcI,EAAd,KAUA,SAASC,EAAeC,GACtBL,EAAmBN,EAAIW,GACvBP,EAAeJ,EAAIK,GAQrB,OAdAO,qBAAU,WACRH,EAASxB,KACR,CAACsB,EAAWtB,IAaX,sBAAM4B,UAAU,eAAhB,SACIN,EAEA,iCACE,cAAChB,EAAD,CACEU,KAAK,OACLa,SAZZ,SAA0BH,GACxB,IAAeI,EAAYJ,EAAMK,OAAzBX,MACRI,EAASM,MAYD,cAAC,IAAD,CACEF,UAAU,wBACVI,MAnCO,CACfC,MAAO,SAmCCC,QAAST,OAIb,iCACE,cAAC,EAAD,CACEG,UAAU,YACV5B,KAAMA,IAER,uBAAM4B,UAAU,YAAhB,UACE,cAAC,IAAD,CACEA,UAAU,cACVM,QAAST,IAEX,cAAC,IAAD,CACEG,UAAU,cACVM,QA9Cd,WACEpB,EAAeC,iBEzBboB,G,MAAQ,CACVC,UAAW,SACXH,MAAO,UACPI,WAAY,SAGVC,E,2KAEF,WACI,OAAO,I,oBAGX,WACI,MAAiCC,KAAK1B,MAA9B2B,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,MACvB,OACI,sBACIb,UAAU,OACVI,MAAOG,EAFX,mBAGQK,EAHR,YAGyBC,S,GAZlBC,aAmBJJ,I,MCPAK,MAbf,WACI,OACI,8BACI,qBACAC,IAAI,qCAEJhB,UAAU,aACViB,IAAI,Q,MCoEDC,MA/Ef,YAAqC,IAAhBL,EAAe,EAAfA,MAAOM,EAAQ,EAARA,KAC1B,OACE,iCACE,cAAC,EAAD,CACEP,cAAeO,EAAKC,OACpBP,MAAOA,IAET,sBAAMb,UAAU,OAAhB,SACImB,EAAKC,QAAU,EAEf,mCACGD,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAEEC,MAAOD,EAAKC,MACZC,UAAWF,EAAKE,UAChBC,SAAUH,EAAKG,SACfC,OAAQJ,EAAKI,QAJRJ,EAAKnC,SAShB,qCACGgC,EAAKE,KAAI,SAACC,EAAMK,GACf,OAAIA,EAAQ,EACH,KAGP,cAAC,EAAD,CAEEJ,MAAOD,EAAKC,MACZC,UAAWF,EAAKE,UAChBC,SAAUH,EAAKG,SACfC,OAAQJ,EAAKI,QAJRJ,EAAKnC,OAQhB,qBAAKa,UAAU,mBAAf,oBACOmB,EAAKC,OAAS,c,QCalBQ,MAlDf,SAAc3C,GACZ,IACES,EAKET,EALFS,UACAD,EAIER,EAJFQ,mBACArB,EAGEa,EAHFb,KACAe,EAEEF,EAFFE,GACAgC,EACElC,EADFkC,KAcIU,EAAeC,aAAgB,YAA6D,IAA3DjB,EAA0D,EAA1DA,MAAOnB,EAAmD,EAAnDA,UAAWyB,EAAwC,EAAxCA,KAAMhC,EAAkC,EAAlCA,GAAIM,EAA8B,EAA9BA,mBAAoBrB,EAAU,EAAVA,KACvF,OACE,uBAAM4B,UAAU,YAAhB,UACE,cAAC,EAAD,CACEN,UAAWA,EACXP,GAAIA,EACJM,mBAAoBA,EACpBrB,KAAMA,IAEPyC,EAAMQ,KAAI,SAACC,EAAMK,GAAP,OACT,cAAC,EAAD,CAEEd,MAAOS,EAAKS,QACZZ,KAAMA,EAAKG,EAAKU,SAFXL,YAQb,OAAQ,cAACE,EAAD,CACEF,MAAO1C,EAAM0C,MACbjC,UAAWA,EACXP,GAAIA,EACJM,mBAAoBA,EACpBrB,KAAMA,EACN+C,KAAMA,EACNN,MArCI,CACZ,CACEkB,QAAS,QACTC,OAAQ,aAEV,CACED,QAAS,WACTC,OAAQ,kBCsBd,IAYepD,cAAQ,MAZI,SAACI,EAAUC,GAClC,MAAO,CACHgD,cAAe,SAAAC,GACXlD,EL1BiB,SAAAkD,GAC3B,MAAO,CACL9C,KAAMC,EACN6C,QKuBiB5C,CAAqB4C,KAGlCC,eAAgB,SAAC3C,GACbR,ELRkB,SAAAQ,GAC5B,MAAO,CACLJ,KAAMC,EACNG,SKKiBF,CAAsBE,QAK5BZ,EApDf,SAAgBK,GACZ,IACIgD,EAGAhD,EAHAgD,cACAE,EAEAlD,EAFAkD,eAIJ,EAA4BxC,mBAAS,IAArC,mBAAOyC,EAAP,KAAeC,EAAf,KAiBA,OAJAtC,qBAAU,WACNoC,EAAeC,KAChB,CAACD,EAAgBC,IAGpB,iCACI,wBACIpC,UAAY,YACZM,QAbR,WACI2B,KAUA,6BAKA,uBACIjC,UAAY,eACZZ,KAAK,OACLa,SAzBR,SAAyBH,GACrB,IAAQN,EAAUM,EAAMK,OAAhBX,MACR6C,EAAU7C,GACV2C,EAAeC,IAuBXE,YAAY,gCCmExB,IAce1D,eAdS,SAAAC,GACtB,MAAO,CACLC,YAAaD,EAAMC,YAAYC,iBAIR,SAACC,EAAUC,GACpC,MAAO,CACLsD,WAAY,SAAAC,GACVxD,ENjEoB,SAAAwD,GACxB,MAAO,CACLpD,KAAMC,EACNmD,WM8DWlD,CAAkBkD,QAKlB5D,EA1Gf,SAAiBK,GACf,IAAQH,EAA4BG,EAA5BH,YAAayD,EAAetD,EAAfsD,WACrB,EAA0B5C,mBAASb,GAAnC,mBAAO2D,EAAP,KAAcC,EAAd,KAUA,EAAoC/C,mBAAS,IAA7C,mBAAOgD,EAAP,KAAmBC,EAAnB,KAEMnD,EAAqB,SAAAN,GACzB,IAAM0D,EAAgBF,EAAWG,SAAS3D,GACtCwD,EAAWI,QAAO,SAAAzB,GAAI,OAAIA,IAASnC,KADjB,sBAEdwD,GAFc,CAEFxD,IACpByD,EAAcC,IAahB9C,qBAAU,WACRwC,EAAWE,KACV,CAACF,EAAYE,IAIhB,IAAMO,EAAeC,aAAkB,YAAsB,IAAnBnE,EAAkB,EAAlBA,YACxC,OACE,qBAAKkB,UAAU,iBAAf,SACGlB,EAAYuC,KAAI,SAACF,EAAMQ,GAAP,OACf,cAAC,EAAD,aAEEjC,UAAWiD,EAAWG,SAAS3B,EAAKhC,IACpCM,mBAAoBA,EACpBkC,MAAOA,EACPR,KAAMA,EACNhC,GAAIgC,EAAKhC,IACLgC,GANCA,EAAKhC,YAapB,OACE,iCACE,cAAC,EAAD,IACA,cAAC6D,EAAD,CACElE,YAAaA,EACboE,UAvCY,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7BV,EAASW,YAAUvE,EAAaqE,EAAUC,IAC1Cb,EAAWE,IAsCPa,KAAK,KACLC,mBAAmB,IACnBC,YAAY,iBACZC,SAAU,UC1EZC,G,kKAEJ,WACE,OAAQ,cAAC,EAAD,Q,GAHM5C,cAaHlC,eANS,SAACC,GACvB,MAAO,CACL8E,aAAc9E,EAAM8E,gBAIgB,KAAzB/E,CAA+B8E,GCL1BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCZAC,EAAe,CACjBC,cAAeC,GAA0B,GACzCpF,aAAcoF,GAA0B,IAuE7BrF,EApEK,WAAmC,IAAlCD,EAAiC,uDAAzBoF,EAAc3E,EAAW,uCAC1CF,EAA6BE,EAA7BF,KAAMI,EAAuBF,EAAvBE,MAAOL,EAAgBG,EAAhBH,GAAIqD,EAAYlD,EAAZkD,QACzB,OAAOpD,GA6DH,QACI,OAAO,eAAIP,GA3Df,KAAKQ,EACD,IAAM+E,EAAkB,sBACjBvF,EAAMqF,eADW,CAEpB,CACI,GAAMG,cACN,KAAQ,GACR,QAAW,GACX,UAAa,GAEb,WAAc,MAItB,MAAO,CACHH,cAAc,YAAKE,GACnBrF,aAAa,YAAKqF,IAE1B,KAAK/E,EACD,IAAMiF,EAAqBzF,EAAMqF,cAAcnB,QAAO,SAAAzB,GAAI,OAAIA,EAAKnC,KAAOA,KAC1E,MAAO,CACH+E,cAAc,YAAKI,GACnBvF,aAAa,YAAKuF,IAE1B,KAAKjF,EACD,IAAMa,EAAU,CAAE9B,KAAMoB,GAClB+E,EAAuB1F,EAAMqF,cAAc7C,KAAI,SAACC,GAClD,OAAGA,EAAKnC,KAAOA,EACJ,2BAAImC,GAASpB,GAEjBoB,KAEX,MAAO,CACH4C,cAAc,YAAKK,GACnBxF,aAAa,YAAMwF,IAE3B,KAAKlF,EACD,IAAMmF,EAAwB3F,EAAMqF,cAAcnB,QAAO,SAAAzB,GACrD,IAAQmD,EAA0BnD,EAA1BmD,UAAWC,EAAepD,EAAfoD,WAOnB,MADoB,sBAAID,GAAJ,YAAkBC,IAAY3B,QAAO,oBAAGvB,iBAAH,MAAe,GAAf,MAAmBC,gBAAnB,MAA8B,GAA9B,SAAuC,IAAIkD,OAAOnF,EAAO,KAAKoF,KAAKpD,IAAc,IAAImD,OAAOnF,EAAO,KAAKoF,KAAKnD,MACtJL,OAAS,GAGlB,IAAIuD,OAAOnF,EAAO,KAAKoF,KAAKtD,EAAKlD,SAE5C,OAAO,2BACAS,GADP,IAEIE,aAAa,YAAMyF,KAE3B,KAAKnF,EACD,MAAO,CACH6E,cAAc,YAAK1B,GACnBzD,aAAa,YAAKyD,M,QCrE5ByB,EAAeY,GAA0B,GAahCC,EAXG,WAAmC,IAAlCjG,EAAiC,uDAAzBoF,EAAc3E,EAAW,uCAOxC,OANDA,EAAOF,KAMCP,GCaJkG,EAbKC,YAAgB,CAOhClG,cACAmG,kBCPEC,EAAQC,YAAYL,GAG1BM,IAASC,OAEP,cAAC,IAAD,CAAWH,MAAOA,EAAlB,SACI,cAAC,EAAD,MAGJI,SAASC,eAAe,SJ6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b525f32c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from 'styled-components';\r\n\r\nfunction NameTeam({name}){\r\n    return (\r\n        <Span>{name}</Span>\r\n    )\r\n}\r\n\r\nconst Span = styled.span`\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  color: red;\r\n  margin-left: 50px;\r\n`;\r\nNameTeam.propTypes = {\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default NameTeam;\r\n","export const LIST_ALL_TEAM_MEMBERS = \"LIST_ALL_TEAM_MEMBERS\";\r\n\r\nexport const LIST_ALL_SAMPLE_MEMBERS = \"LIST_ALL_SAMPLE_MEMBERS\";\r\n\r\nexport const ADD_TASK = \"ADD_TASK\";\r\n\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\n\r\nexport const SET_VISIBLE_FILTER = \"SET_VISIBLE_FILTER\";\r\n\r\nexport const CHANGE_THEME = \"CHANGE_THEME\";\r\n\r\nexport const CHANGE_ITEM_CONTENT = \"CHANGE_ITEM_CONTENT\";\r\n\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\n\r\nexport const TOGGLE_COMPLETE = \"TOGGLE_COMPLETE\";\r\n\r\nexport const CREATE_NEW_TEAM = \"CREATE_NEW_TEAM\";\r\n\r\nexport const DELETE_TEAM_BY_ID = \"DELETE_TEAM_BY_ID\";\r\n\r\nexport const CHANGE_NAME_BY_ID = \"CHANGE_NAME_BY_ID\";\r\n\r\nexport const SEARCH_ANYTHING = \"SEARCH_ANYTHING\";\r\n\r\nexport const UPDATE_LIST = \"UPDATE_LIST\";\r\n\r\n//transcript\r\n\r\nexport const CURRENT_ROW = \"CURRENT_ROW\";\r\n\r\nexport const ADD_NEW_ROW = \"ADD_NEW_ROW\";\r\n\r\nexport const DELETE_ROW = \"DELETE_ROW\";\r\n\r\nexport const SAVE_ROW = \"SAVE_ROW\";\r\n\r\nexport const EDIT_THIS_COURSE = \"EDIT_THIS_COURSE\";\r\n\r\nexport const CANCEL_THIS_UPDATE = \"CANCEL_THIS_UPDATE\";\r\n\r\nexport const ADD_NEW_COURSE = \"ADD_NEW_COURSE\";\r\n\r\nexport const DELETE_THIS_COURSE = \"DELETE_THIS_COURSE\";\r\n\r\nexport const UPDATE_THIS_COURSE = \"UPDATE_THIS_COURSE\";\r\n\r\nexport const HANDLE_ORIGIN = \"HANDLE_ORIGIN\";\r\n\r\n//colors\r\nexport const GENERATE_COLOR_REQUEST = 'GENERATE_COLOR_REQUEST';\r\n\r\nexport const GENERATE_COLOR_SUCCESS = 'GENERATE_COLOR_SUCCESS';\r\n\r\nexport const CHANGE_COLOR = 'CHANGE_COLOR';\r\n\r\nexport const COPY_COLOR_TO_CLIPBOARD = 'COPY_COLOR_TO_CLIPBOARD';\r\n\r\n//gradients\r\nexport const GENERATE_GRADIENT_REQUEST = 'GENERATE_GRADIENT_REQUEST';\r\n\r\nexport const GENERATE_GRADIENT_SUCCESS = 'GENERATE_GRADIENT_SUCCESS';\r\n\r\nexport const CHANGE_GRADIENT = 'CHANGE_GRADIENT';\r\n\r\nexport const COPY_GRADIENT_TO_CLIPBOARD = 'COPY_GRADIENT_TO_CLIPBOARD';\r\n\r\nexport const ADD_NEW_COLOR = 'ADD_NEW_COLOR';\r\nexport const EDIT_ANGLE = 'EDIT_ANGLE';\r\nexport const CHANGE_GRADIENT_DIRECTION = 'CHANGE_GRADIENT_DIRECTION';\r\nexport const TOGGLE_EDIT_COLOR_OF_GRADIENT = 'TOGGLE_EDIT_COLOR_OF_GRADIENT';\r\nexport const EDIT_COLOR_OF_GRADIENT = 'EDIT_COLOR_OF_GRADIENT';\r\nexport const TOGGLE_SLIDER = 'TOGGLE_SLIDER';\r\nexport const START_UPDATE_COLOR_STOP = 'START_UPDATE_COLOR_STOP';\r\nexport const UPDATE_COLOR_STOP = 'UPDATE_COLOR_STOP';\r\nexport const DELETE_SELECTED_COLOR = 'DELETE_SELECTED_COLOR';\r\n\r\n//settings\r\nexport const TOGGLE_PREFIX = 'TOGGLE_PREFIXES';\r\nexport const TOGGLE_FALLBACK = 'TOGGLE_FALLBACK';\r\n","import NameTeam from \"./NameTeam.js\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TopCard.css\";\r\nimport * as action from \"./../actions/index\";\r\nimport { BsTrashFill } from \"react-icons/bs\";\r\nimport { FaCheckCircle, FaPencilAlt } from \"react-icons/fa\";\r\nimport styled from 'styled-components';\r\n\r\nfunction TopCard(props) {\r\n  const {\r\n    handleEditTeamName,\r\n    name,\r\n    id,\r\n    isEditing,\r\n    deleteTeamById,\r\n    changeNameById,\r\n    // DataMembers,\r\n    // setStyleOfCopyRight\r\n  } = props;\r\n\r\n  const icon2Style = {\r\n      color: \"green\"\r\n    }\r\n\r\n  const [value, setValue] = useState(name);\r\n\r\n  function handleClearTeam() {\r\n    deleteTeamById(id);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setValue(name)\r\n  }, [isEditing, name])\r\n\r\n  function handleSaveName(event) {\r\n    handleEditTeamName(id, event);\r\n    changeNameById(id, value);\r\n  }\r\n\r\n  function handleChangeName(event) {\r\n    const { value: newName } = event.target;\r\n    setValue(newName);\r\n  }\r\n\r\n  return (\r\n      <span className=\"topCardStyle\">\r\n        {(isEditing)\r\n          ?\r\n          <span>\r\n            <Input\r\n              type=\"text\"\r\n              onChange={handleChangeName}\r\n            />\r\n            <FaCheckCircle \r\n              className=\"iconStyle symbolStyle\"\r\n              style={icon2Style}\r\n              onClick={handleSaveName}\r\n            />\r\n          </span>\r\n          :\r\n          <span>\r\n            <NameTeam\r\n              className=\"nameStyle\"\r\n              name={name}\r\n            />\r\n            <span className=\"iconStyle\">\r\n              <FaPencilAlt\r\n                className=\"symbolStyle\"\r\n                onClick={handleSaveName} \r\n              />\r\n              <BsTrashFill\r\n                className=\"symbolStyle\" \r\n                onClick={handleClearTeam} \r\n              />\r\n            </span>\r\n          </span>\r\n        }\r\n      </span>)\r\n}\r\n\r\nTopCard.propTypes = {\r\n  isEditing: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  handleEditTeamName: PropTypes.func,\r\n  name: PropTypes.string\r\n};\r\n\r\nconst Input = styled.input`\r\n  border-bottom: 2px solid #337AB7;\r\n  margin-left: 50px;\r\n  background: none;\r\n  border-top: none;\r\n  border-right: none;\r\n  border-left: none;\r\n  width: 120px;\r\n`;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    DataMembers: state.DataMembers.currentState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n      deleteTeamById: (id) => {\r\n        dispatch(action.deleteTeamById(id));\r\n      },\r\n      changeNameById: (id, value) => {\r\n        dispatch(action.changeNameById(id, value));\r\n      }\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopCard);;","import * as types from '../constants/ActionTypes';\r\n\r\nexport const listAllSampleMembers = () => {\r\n  return {\r\n    type: types.LIST_ALL_SAMPLE_MEMBERS\r\n  };\r\n};\r\n\r\nexport const listAllTeamMembers = () => {\r\n  return {\r\n    type: types.LIST_ALL_TEAM_MEMBERS\r\n  };\r\n};\r\n\r\nexport const addTask = task => {\r\n  return {\r\n    type: types.ADD_TASK,\r\n    task\r\n  };\r\n};\r\n\r\nexport const createNewTeam = task => {\r\n  return {\r\n    type: types.CREATE_NEW_TEAM,\r\n    task\r\n  };\r\n};\r\n\r\nexport const deleteTeamById = id => {\r\n  return {\r\n    type: types.DELETE_TEAM_BY_ID,\r\n    id\r\n  };\r\n};\r\n\r\nexport const changeNameById = (id, value) => {\r\n  return {\r\n    type: types.CHANGE_NAME_BY_ID,\r\n    id,\r\n    value\r\n  };\r\n};\r\n\r\nexport const searchAnything = value => {\r\n  return {\r\n    type: types.SEARCH_ANYTHING,\r\n    value\r\n  };\r\n};\r\n\r\nexport const updateList = newList => {\r\n  return {\r\n    type: types.UPDATE_LIST,\r\n    newList\r\n  };\r\n};\r\n\r\nexport const addNewRow = () => {\r\n  return {\r\n    type: types.ADD_NEW_ROW\r\n  };\r\n};\r\n\r\nexport const deleteRow = id => {\r\n  return {\r\n    type: types.DELETE_ROW,\r\n    id\r\n  };\r\n};\r\n\r\nexport const editRow = id => {\r\n  return {\r\n    type: types.EDIT_THIS_COURSE,\r\n    id\r\n  };\r\n};\r\n\r\nexport const saveRow = (\r\n  id,\r\n  semester,\r\n  courseId,\r\n  courseTitle,\r\n  credits,\r\n  process,\r\n  examination,\r\n  factor\r\n) => {\r\n  return {\r\n    type: types.SAVE_ROW,\r\n    id,\r\n    semester,\r\n    courseId,\r\n    courseTitle,\r\n    credits,\r\n    process,\r\n    examination,\r\n    factor\r\n  };\r\n};\r\n\r\nexport const cancelThisUpdate = () => {\r\n  return {\r\n    type: types.CANCEL_THIS_UPDATE,\r\n  };\r\n};\r\n\r\nexport const addNewCourse = () => {\r\n  return {\r\n    type: types.ADD_NEW_COURSE,\r\n  };\r\n};\r\n\r\nexport const handleOrigin = (newErrors, newInfo) => {\r\n  return {\r\n    type: types.HANDLE_ORIGIN,\r\n    errors: newErrors,\r\n    info: newInfo\r\n  };\r\n};\r\n\r\nexport const deleteThisCourse = (courseId) => {\r\n  return {\r\n    type: types.DELETE_THIS_COURSE,\r\n    courseId\r\n  };\r\n};\r\n\r\nexport const editThisCourse = (item) => {\r\n  return {\r\n    type: types.EDIT_THIS_COURSE,\r\n    item: item\r\n  };\r\n};\r\n\r\nexport const updateThisCourse = (item) => {\r\n  return {\r\n    type: types.UPDATE_THIS_COURSE,\r\n    item: item\r\n  };\r\n};\r\n","import React, { Component  } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './User.css';\r\n\r\nconst title = {\r\n    fontStyle: \"normal\",\r\n    color: \"#8C1515\",\r\n    fontWeight: \"bold\",\r\n}\r\n\r\nclass User extends Component {\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { elementNumber, admin } = this.props;\r\n        return (\r\n            <span\r\n                className=\"img3\" \r\n                style={title}>\r\n                {`${elementNumber} ${admin}`}\r\n            </span>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default User;\r\n\r\n// function User({ elementNumber, admin }) {\r\n//     return (\r\n//         <span\r\n//             className=\"img3\" \r\n//             style={title}>\r\n//             {`${elementNumber} ${admin}`}\r\n//         </span>\r\n//     )\r\n// }\r\n\r\n// export default User;\r\n\r\nUser.propTypes = {\r\n    elementNumber: PropTypes.number,\r\n    admin: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          mission: PropTypes.oneOf([\"USERS\", \"MANAGERS\"]),\r\n          idTask: PropTypes.oneOf([\"memberIds\", \"managerIds\"])\r\n        }),\r\n    ),\r\n}","import React from \"react\";\r\nimport \"./Icon.css\"\r\n\r\n// const icon = {\r\n//     borderRadius: \"50%\",\r\n//     height: \"50px\",\r\n//     width: \"50px\",\r\n// }\r\n\r\nfunction Icon() {\r\n    return (\r\n        <div>\r\n            <img \r\n            src=\"http://webcoban.vn/image/cat-2.jpg\" \r\n            // style={icon}\r\n            className=\"icon1Style\" \r\n            alt=\"\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Icon;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport User from './User.js';\r\nimport Icon from './Icon.js';\r\nimport './UserGroup.css';\r\nfunction UserGroup({ admin, post }) {\r\n  return (\r\n    <span>\r\n      <User\r\n        elementNumber={post.length} \r\n        admin={admin}\r\n      />\r\n      <span className=\"img3\">\r\n        {(post.length <= 5)\r\n          ?\r\n          <>\r\n            {post.map((item) => (\r\n              <Icon\r\n                key={item.id}\r\n                email={item.email}\r\n                firstName={item.firstName}\r\n                lastName={item.lastName}\r\n                status={item.status}\r\n              />\r\n            ))}\r\n          </>\r\n          :\r\n          <>\r\n            {post.map((item, index) => {\r\n              if (index > 3) {\r\n                return null\r\n              }\r\n              return (\r\n                <Icon\r\n                  key={item.id}\r\n                  email={item.email}\r\n                  firstName={item.firstName}\r\n                  lastName={item.lastName}\r\n                  status={item.status}\r\n                />\r\n              )\r\n            })}\r\n            <div className=\"number iconStyle\">\r\n              {`+${post.length - 4}`}\r\n            </div>\r\n          </>\r\n        }\r\n      </span>\r\n    </span>\r\n  )\r\n}\r\n\r\nUserGroup.propTypes = {\r\n  email: PropTypes.string,\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n  status: PropTypes.string.isRequired,\r\n  admin: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      mission: PropTypes.oneOf([\"USERS\", \"MANAGERS\"]),\r\n      idTask: PropTypes.oneOf([\"memberIds\", \"managerIds\"])\r\n    }),\r\n  ),\r\n  post: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    creator: PropTypes.string,\r\n    memberIds: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string,\r\n      email: PropTypes.string,\r\n      firstName: PropTypes.string,\r\n      lastName: PropTypes.string,\r\n      status: PropTypes.string\r\n    })),\r\n    managerIds: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string,\r\n      email: PropTypes.string,\r\n      firstName: PropTypes.string,\r\n      lastName: PropTypes.string,\r\n      status: PropTypes.string\r\n    }))\r\n  }),\r\n}\r\n\r\nexport default UserGroup;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport TopCard from \"./TopCard.js\";\r\nimport UserGroup from \"./UserGroup.js\";\r\nimport { SortableElement } from \"react-sortable-hoc\";\r\n\r\nfunction Card(props) {\r\n  const { \r\n    isEditing,\r\n    handleEditTeamName,\r\n    name,\r\n    id,\r\n    post\r\n  } = props;\r\n\r\n  const admin = [\r\n    {\r\n      mission: \"USERS\",\r\n      idTask: \"memberIds\"\r\n    },\r\n    {\r\n      mission: \"MANAGERS\",\r\n      idTask: \"managerIds\"\r\n    }\r\n  ];\r\n\r\n  const SortableItem = SortableElement(({admin, isEditing, post, id, handleEditTeamName, name}) => {\r\n  return (\r\n    <span className=\"grid-item\">\r\n      <TopCard\r\n        isEditing={isEditing}\r\n        id={id}\r\n        handleEditTeamName={handleEditTeamName}\r\n        name={name}\r\n      />\r\n      {admin.map((item, index) => (\r\n        <UserGroup\r\n          key={index}\r\n          admin={item.mission}\r\n          post={post[item.idTask]}\r\n        />\r\n      ))}\r\n    </span>);\r\n  });\r\n\r\n  return (<SortableItem\r\n            index={props.index}\r\n            isEditing={isEditing}\r\n            id={id}\r\n            handleEditTeamName={handleEditTeamName}\r\n            name={name}\r\n            post={post}\r\n            admin={admin}  \r\n          />);\r\n}\r\n\r\nexport default Card;\r\nCard.propTypes = {\r\n  isEditing: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  handleEditTeamName: PropTypes.func,\r\n  admin: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      mission: PropTypes.oneOf([\"USERS\", \"MANAGERS\"]),\r\n      idTask: PropTypes.oneOf([\"memberIds\", \"managerIds\"])\r\n    }),\r\n  ),\r\n  post: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    creator: PropTypes.string,\r\n    memberIds: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string,\r\n      email: PropTypes.string,\r\n      firstName: PropTypes.string,\r\n      lastName: PropTypes.string,\r\n      status: PropTypes.string\r\n    })),\r\n    managerIds: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string,\r\n      email: PropTypes.string,\r\n      firstName: PropTypes.string,\r\n      lastName: PropTypes.string,\r\n      status: PropTypes.string\r\n    }))\r\n  }),\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as action from \"./../actions/index\";\r\n\r\nfunction Header(props) {\r\n    const { \r\n        createNewTeam,\r\n        searchAnything,\r\n        // setStyleOfCopyRight\r\n    } = props;\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    \r\n    function handleSearchBox(event){\r\n        const { value } = event.target;\r\n        setSearch(value);\r\n        searchAnything(search);\r\n    }\r\n\r\n    function handleCreateNewTeam(){\r\n        createNewTeam();\r\n        // setStyleOfCopyRight();\r\n    }\r\n\r\n    useEffect(() => { \r\n        searchAnything(search);   \r\n    }, [searchAnything, search])\r\n\r\n    return (\r\n    <span>\r\n        <button\r\n            className = \"my-button\"\r\n            onClick = {handleCreateNewTeam}>\r\n        CREATE NEW TEAM\r\n        </button>\r\n        <input\r\n            className = \"my-searchbox\"\r\n            type=\"text\"\r\n            onChange = {handleSearchBox}\r\n            placeholder=\"Enter Search Word ...\"\r\n        />\r\n    </span>)\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        createNewTeam: task => {\r\n            dispatch(action.createNewTeam(task));\r\n        },\r\n\r\n        searchAnything: (value) => {\r\n            dispatch(action.searchAnything(value));\r\n        }\r\n    }\r\n};\r\n  \r\nexport default connect(null, mapDispatchToProps)(Header);","import React, { useState, useEffect } from 'react';\r\nimport Card from '../components/Card.js';\r\nimport { connect } from 'react-redux';\r\nimport { arrayMove } from 'react-sortable-hoc';\r\n// import { NavLink } from \"react-router-dom\";\r\nimport { SortableContainer } from 'react-sortable-hoc';\r\nimport * as action from '../actions/index';\r\nimport PropTypes from 'prop-types';\r\n// import Gallery from \"react-photo-gallery\";\r\n// import arrayMove from \"array-move\";\r\n// import Footer from './Footer';\r\n// import styled, { css } from 'styled-components';\r\nimport Header from '../components/Header';\r\n\r\nfunction Display(props) {\r\n  const { DataMembers, updateList } = props;\r\n  const [lists, setLists] = useState(DataMembers);\r\n  // const [copyright, setCopyright] = useState(false);\r\n  // const { match } = props;\r\n  // console.log(match)\r\n  // var url = match.url;\r\n  // const newData = DataMembers.map((item, index) => {\r\n  //   const newKey = { slug: item.name }\r\n  //   return {...item, ...newKey}\r\n  // })\r\n\r\n  const [edittingId, setEdittingId] = useState([]);\r\n\r\n  const handleEditTeamName = id => {\r\n    const newEdittingId = edittingId.includes(id)\r\n      ? edittingId.filter(item => item !== id)\r\n      : [...edittingId, id];\r\n    setEdittingId(newEdittingId);\r\n  };\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setLists(arrayMove(DataMembers, oldIndex, newIndex));\r\n    updateList(lists);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (DataMembers.length <= 3) setCopyright(true);\r\n  //   else setCopyright(false);\r\n  // }, [DataMembers]);\r\n\r\n  useEffect(() => {\r\n    updateList(lists);\r\n  }, [updateList, lists]);\r\n\r\n  // console.log('checkLength', copyright);\r\n\r\n  const SortableList = SortableContainer(({ DataMembers }) => {\r\n    return (\r\n      <div className=\"grid-container\">\r\n        {DataMembers.map((post, index) => (\r\n          <Card\r\n            key={post.id}\r\n            isEditing={edittingId.includes(post.id)}\r\n            handleEditTeamName={handleEditTeamName}\r\n            index={index}\r\n            post={post}\r\n            id={post.id}\r\n            {...post}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <span>\r\n      <Header />\r\n      <SortableList\r\n        DataMembers={DataMembers}\r\n        onSortEnd={onSortEnd}\r\n        axis=\"xy\"\r\n        transitionDuration=\"0\"\r\n        helperClass=\"SortableHelper\"\r\n        distance={1}\r\n      />\r\n      {/* <FooterStyle copyright={copyright}>\r\n        <Footer />\r\n      </FooterStyle> */}\r\n    </span>\r\n  );\r\n}\r\n\r\n// const FooterStyle = styled.div`\r\n//   width: 100%;\r\n//   height: 60px;\r\n//   background: #1f568b;\r\n//   text-align: center;\r\n//   padding: 10px;\r\n//   color: white;\r\n//   ${props =>\r\n//     props.copyright\r\n//       ? css`\r\n//           bottom: 0px;\r\n//           position: absolute;\r\n//         `\r\n//       : css`\r\n//           margin-top: 60px;\r\n//           position: relative;\r\n//         `};\r\n// `;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    DataMembers: state.DataMembers.currentState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    updateList: newList => {\r\n      dispatch(action.updateList(newList));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Display);\r\n\r\n// {\r\n//   /* <NavLink to={`${url}/${post.slug}`}>\r\n// <Card\r\n//   isEditing={edittingId.includes(post.id)}\r\n//   handleClearTeam={handleClearTeam}\r\n//   newName={newName}\r\n//   handleEditTeamName={handleEditTeamName}\r\n//   key={post.id}\r\n//   {...post}\r\n// />\r\n// </NavLink> */\r\n// }\r\n\r\nDisplay.propTypes = {\r\n  DataMembers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      creator: PropTypes.string,\r\n      memberIds: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          id: PropTypes.string,\r\n          email: PropTypes.string,\r\n          firstName: PropTypes.string,\r\n          lastName: PropTypes.string,\r\n          status: PropTypes.string\r\n        })\r\n      ),\r\n      managerIds: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          id: PropTypes.string,\r\n          email: PropTypes.string,\r\n          firstName: PropTypes.string,\r\n          lastName: PropTypes.string,\r\n          status: PropTypes.string\r\n        })\r\n      )\r\n    })\r\n  ),\r\n  isEditing: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  handleEditTeamName: PropTypes.func,\r\n  post: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    creator: PropTypes.string,\r\n    memberIds: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        email: PropTypes.string,\r\n        firstName: PropTypes.string,\r\n        lastName: PropTypes.string,\r\n        status: PropTypes.string\r\n      })\r\n    ),\r\n    managerIds: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        email: PropTypes.string,\r\n        firstName: PropTypes.string,\r\n        lastName: PropTypes.string,\r\n        status: PropTypes.string\r\n      })\r\n    )\r\n  })\r\n};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Display from \"./views/Display\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (<Display />);\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    visibleTheme: state.visibleTheme\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as types from \"../constants/ActionTypes\";\r\nimport DetailList from \"../DetailList.json\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// var data = JSON.parse(localStorage.getItem(\"task\"));\r\n\r\nconst initialState = { \r\n    previousState: DetailList ? DetailList : [],\r\n    currentState: DetailList ? DetailList : []\r\n}\r\n\r\nconst DataMembers = (state = initialState, action) => {\r\n    const { type, value, id, newList } = action;\r\n    switch(type) {\r\n        case types.LIST_ALL_TEAM_MEMBERS:\r\n            return {...state};\r\n        case types.CREATE_NEW_TEAM:\r\n            const newListAfterCreate = [\r\n                ...state.previousState,\r\n                {\r\n                    \"id\": uuidv4(),\r\n                    \"name\": \"\",\r\n                    \"creator\": \"\",\r\n                    \"memberIds\": [\r\n                    ],\r\n                    \"managerIds\": [\r\n                    ]\r\n                } \r\n            ];\r\n            return {\r\n                previousState: [...newListAfterCreate],\r\n                currentState: [...newListAfterCreate]\r\n            }\r\n        case types.DELETE_TEAM_BY_ID:\r\n            const newListAfterDelete = state.previousState.filter(item => item.id !== id);\r\n            return { \r\n                previousState: [...newListAfterDelete],\r\n                currentState: [...newListAfterDelete]\r\n            }\r\n        case types.CHANGE_NAME_BY_ID:\r\n            const newName = { name: value };\r\n            const newListAfterChanging = state.previousState.map((item)=>{\r\n                if(item.id === id){\r\n                    return {...item, ...newName}\r\n                }\r\n                return item;\r\n            });\r\n            return {\r\n                previousState: [...newListAfterChanging],\r\n                currentState:  [...newListAfterChanging]\r\n            };\r\n        case types.SEARCH_ANYTHING:\r\n            const newListAfterSearching = state.previousState.filter(item => {\r\n                const { memberIds, managerIds } = item;\r\n                // const matchUserId = [...memberIds, ...managerIds].filter(({ firstName = \"\", lastName = \"\" }) => firstName.includes(value) || lastName.includes(value))\r\n                // if (matchUserId.length > 0) {\r\n                //     return true;\r\n                // }\r\n                // return item.name.includes(value);\r\n                const matchUserId = [...memberIds, ...managerIds].filter(({ firstName = \"\", lastName = \"\" }) => new RegExp(value, \"i\").test(firstName) || new RegExp(value, \"i\").test(lastName))\r\n                if (matchUserId.length > 0) {\r\n                    return true;\r\n                }\r\n                return new RegExp(value, \"i\").test(item.name);\r\n            });\r\n            return {\r\n                ...state,\r\n                currentState:  [...newListAfterSearching]\r\n            };\r\n        case types.UPDATE_LIST:\r\n            return {\r\n                previousState: [...newList],\r\n                currentState: [...newList]\r\n            }\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport default DataMembers;\r\n","import * as types from \"../constants/ActionTypes\";\r\nimport CourseList from \"../courseList.json\";\r\n\r\nconst initialState = CourseList ? CourseList : [];\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.LIST_ALL_SAMPLE_MEMBERS:\r\n            return state;\r\n        case types.ADD_TASK:\r\n            return state;      \r\n        default: \r\n            return state; \r\n    }\r\n};\r\n\r\nexport default myReducer;","import { combineReducers } from \"redux\";\r\n// import ColorsReducer from './ColorsReducer';\r\n// import GradientsReducer from './GradientsReducer';\r\n// import SettingsReducer from './SettingsReducer';\r\n// import todoList from \"./todoList.reducer\";\r\n// import visibleTodoListFilter from \"./visibleTodoFilter.reducer\";\r\n// import visibleTheme from \"./visibleTheme.reducer\";\r\nimport DataMembers from \"./DataMembers\";\r\nimport sampleMembers from \"./sampleMembers\";\r\n// import TranscriptReducer from \"./TranscriptReducer\";\r\n// import { TaskReducer } from \"./TaskReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    // colors: ColorsReducer,\r\n    // gradients: GradientsReducer,\r\n    // settings: SettingsReducer,\r\n    // todoList,\r\n    // visibleTodoListFilter, \r\n    // visibleTheme, \r\n    DataMembers,\r\n    sampleMembers,\r\n    // TranscriptReducer, \r\n    // TaskReducer,\r\n});\r\n\r\nexport default rootReducer;","// import '@babel/polyfill';\r\nimport React from 'react';\r\n// import './index.scss';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n//store\r\nimport { createStore } from \"redux\";\r\nimport myReducer from \"./reducers/root\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(myReducer);\r\n// const persisted = getLocalStorage();\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider  store={store}>\r\n      <App />\r\n  </Provider>,   \r\n  // {/* </React.StrictMode>, */}\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}